import numpy as np
from datetime import timedelta
from dateutil.parser import parse
import pandas as pd
import math
from math import radians, sin, cos, sqrt, asin


def LLs2Dist(lat1, lon1, lat2, lon2):#根据经纬度计算距离
    R = 6372.8  # 地球半径

    dLat = radians(lat2 - lat1)
    dLon = radians(lon2 - lon1)
    lat1 = radians(lat1)
    lat2 = radians(lat2)

    a = sin(dLat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dLon / 2) ** 2
    c = 2 * asin(sqrt(a))

    return R * c


def t2s(t):  #将时分秒格式的时间转换为秒数
    h,m,s = t.strip().split(":")
    return (int(h) * 3600 + int(m) * 60 + int(s))

tour = [[0, 1, 4, 5, 6, 9, 2, 7, 3, 8, 11, 12, 13, 10, 15, 16, 14, 17, 18, 19],
         [19, 18, 12, 11, 17, 16, 13, 15, 14, 10, 8, 7, 9, 4, 0, 5, 6, 2, 3, 1],
         [0, 4, 2, 1, 9, 7, 3, 6, 8, 10, 11, 12, 13, 14, 5, 17, 15, 16, 18, 19],
         [17, 19, 12, 16, 15, 13, 18, 14, 10, 11, 5, 4, 8, 6, 7, 3, 2, 0, 1, 9],
         [19, 16, 15, 18, 17, 14, 13, 12, 7, 8, 6, 9, 11, 4, 1, 5, 10, 3, 2, 0],
         [17, 8, 9, 16, 11, 10, 7, 14, 12, 19, 18, 13, 5, 15, 6, 4, 3, 2, 0, 1],
         [1, 6, 0, 10, 7, 2, 3, 4, 8, 5, 11, 15, 12, 14, 13, 9, 17, 16, 18, 19],
         [6, 1, 2, 7, 4, 3, 5, 0, 8, 9, 10, 11, 13, 14, 12, 16, 15, 18, 19, 17],
         [2, 1, 3, 4, 0, 5, 6, 7, 8, 9, 11, 10, 12, 13, 16, 15, 14, 17, 18, 19],
         [17, 18, 16, 19, 14, 12, 11, 8, 15, 7, 10, 6, 5, 4, 3, 9, 0, 2, 13, 1],
         [16, 18, 1, 11, 12, 19, 17, 13, 15, 14, 10, 0, 7, 9, 8, 5, 4, 6, 2, 3],
         [15, 18, 16, 17, 19, 14, 11, 10, 13, 12, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0],
         [15, 16, 19, 17, 12, 10, 11, 14, 18, 13, 9, 8, 7, 5, 6, 0, 2, 3, 1, 4],
         [5, 3, 4, 2, 6, 8, 1, 7, 9, 10, 14, 15, 16, 13, 11, 12, 17, 18, 19, 0],
         [12, 19, 1, 15, 18, 17, 10, 16, 11, 14, 13, 0, 6, 8, 9, 7, 2, 3, 4, 5],
         [1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
         [12, 16, 17, 15, 18, 14, 19, 13, 11, 9, 7, 10, 8, 6, 5, 2, 3, 4, 0, 1],
         [18, 17, 19, 16, 0, 14, 15, 13, 12, 11, 10, 9, 8, 6, 7, 5, 3, 4, 2, 1],
         [3, 6, 4, 1, 0, 2, 5, 9, 8, 12, 10, 13, 7, 14, 11, 16, 15, 17, 18, 19],
         [0, 3, 5, 1, 2, 4, 8, 7, 6, 10, 12, 9, 13, 14, 16, 15, 11, 18, 17, 19],
         [0, 1, 3, 9, 2, 10, 4, 6, 5, 8, 7, 11, 12, 13, 14, 15, 18, 17, 19, 16],
         [15, 19, 0, 14, 1, 16, 4, 3, 9, 6, 17, 18, 11, 10, 5, 7, 2, 12, 8, 13],
         [4, 3, 0, 2, 1, 5, 6, 9, 8, 10, 12, 11, 7, 15, 14, 13, 16, 17, 18, 19],
         [18, 19, 16, 15, 17, 13, 12, 14, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 2, 1],
         [4, 2, 6, 1, 5, 7, 8, 9, 13, 12, 3, 10, 14, 15, 16, 11, 17, 18, 0, 19],
         [3, 4, 1, 2, 5, 0, 11, 6, 7, 12, 8, 9, 10, 13, 15, 16, 17, 18, 14, 19],
         [18, 15, 19, 17, 16, 14, 11, 13, 10, 7, 6, 5, 12, 9, 8, 4, 0, 3, 2, 1],
         [19, 18, 17, 13, 11, 12, 16, 15, 14, 10, 9, 8, 7, 6, 5, 3, 4, 0, 1, 2],
         [1, 2, 6, 5, 0, 7, 3, 4, 8, 10, 9, 14, 11, 12, 13, 15, 16, 17, 18, 19],
         [19, 18, 13, 14, 16, 12, 17, 15, 11, 9, 10, 5, 8, 7, 6, 4, 0, 1, 3, 2]]
# 20nodes violation

tour1 = [[14, 19, 39, 18, 17, 37, 15, 16, 38, 12, 36, 11, 10, 13, 33, 35, 34, 30, 49, 32, 9, 31, 7, 5, 8, 4, 44, 29, 2, 6, 3, 23, 48, 45, 47, 22, 1, 41, 26, 42, 27, 28, 46, 43, 25, 24, 0, 21, 20, 40],
        [30, 11, 10, 31, 33, 34, 32, 13, 14, 16, 35, 4, 36, 12, 15, 17, 37, 0, 19, 18, 1, 6, 7, 42, 2, 3, 38, 20, 39, 24, 41, 23, 22, 40, 21, 5, 46, 29, 8, 25, 26, 9, 28, 43, 44, 45, 27, 47, 48, 49],
        [39, 38, 36, 17, 16, 19, 18, 31, 14, 12, 48, 32, 49, 1, 6, 15, 34, 43, 2, 4, 5, 23, 8, 33, 40, 11, 30, 46, 37, 3, 7, 13, 21, 28, 24, 44, 0, 9, 29, 10, 20, 25, 26, 22, 45, 27, 47, 42, 41, 35],
        [29, 8, 9, 7, 5, 6, 28, 49, 4, 27, 48, 2, 3, 26, 23, 24, 47, 19, 21, 0, 20, 25, 1, 22, 45, 17, 44, 46, 42, 18, 38, 15, 40, 41, 39, 16, 36, 10, 43, 12, 11, 13, 14, 30, 31, 32, 34, 35, 37, 33],
        [24, 2, 42, 5, 1, 11, 6, 9, 48, 21, 7, 23, 0, 22, 40, 4, 41, 8, 43, 47, 46, 49, 44, 45, 20, 25, 28, 10, 13, 29, 27, 26, 3, 14, 30, 12, 32, 15, 17, 16, 31, 39, 33, 34, 18, 19, 35, 36, 37, 38],
        [49, 29, 27, 28, 9, 26, 6, 5, 7, 48, 8, 3, 45, 20, 21, 22, 43, 23, 25, 42, 46, 24, 44, 47, 2, 19, 1, 4, 15, 18, 37, 36, 39, 40, 14, 0, 38, 17, 33, 10, 11, 16, 12, 13, 30, 32, 35, 34, 31, 41],
        [44, 17, 18, 39, 38, 15, 37, 16, 14, 35, 19, 36, 10, 13, 11, 9, 31, 2, 32, 7, 26, 0, 33, 1, 3, 24, 42, 4, 5, 45, 25, 12, 47, 46, 48, 27, 28, 6, 8, 21, 22, 23, 29, 20, 30, 34, 40, 41, 43, 49],
        [29, 9, 49, 47, 8, 28, 48, 27, 7, 5, 26, 25, 45, 44, 6, 46, 43, 42, 3, 4, 21, 24, 23, 40, 41, 0, 2, 1, 19, 17, 36, 39, 37, 38, 20, 18, 22, 32, 35, 11, 10, 12, 15, 16, 33, 13, 34, 31, 30, 14],
        [42, 22, 7, 0, 1, 24, 6, 23, 10, 20, 27, 26, 4, 2, 44, 21, 43, 41, 8, 25, 45, 28, 3, 29, 5, 46, 40, 48, 47, 9, 32, 33, 30, 34, 31, 35, 13, 14, 15, 36, 49, 11, 12, 37, 38, 39, 19, 16, 17, 18],
        [9, 49, 48, 29, 8, 27, 28, 46, 7, 47, 6, 3, 45, 43, 42, 44, 4, 5, 23, 0, 1, 26, 22, 25, 41, 17, 21, 40, 20, 39, 24, 18, 19, 36, 38, 16, 2, 10, 13, 15, 14, 35, 37, 12, 11, 33, 32, 34, 30, 31],
        [19, 18, 17, 14, 16, 13, 39, 12, 36, 37, 15, 49, 8, 11, 35, 34, 9, 48, 26, 5, 7, 46, 29, 38, 6, 33, 47, 45, 31, 32, 2, 41, 28, 27, 30, 44, 4, 21, 24, 0, 20, 43, 3, 25, 10, 40, 22, 23, 1, 42],
        [10, 9, 7, 8, 6, 28, 27, 49, 48, 5, 25, 26, 29, 4, 3, 47, 0, 1, 2, 24, 22, 23, 46, 21, 45, 42, 41, 20, 43, 44, 19, 17, 39, 14, 40, 18, 38, 11, 15, 13, 12, 16, 31, 32, 35, 33, 37, 34, 36, 30],
        [39, 17, 16, 15, 38, 13, 14, 37, 36, 12, 19, 11, 35, 33, 31, 32, 9, 10, 28, 29, 18, 34, 30, 49, 21, 8, 46, 47, 45, 27, 48, 6, 25, 7, 22, 3, 2, 26, 40, 44, 41, 24, 1, 23, 42, 5, 43, 4, 20, 0],
        [28, 29, 6, 9, 7, 27, 8, 24, 5, 4, 25, 26, 48, 23, 0, 1, 21, 2, 3, 22, 49, 42, 46, 19, 39, 43, 18, 44, 38, 45, 47, 40, 37, 41, 17, 20, 14, 10, 11, 15, 12, 13, 16, 30, 31, 32, 34, 33, 36, 35],
        [39, 38, 37, 36, 33, 34, 35, 18, 16, 17, 32, 19, 6, 7, 8, 12, 15, 28, 4, 1, 9, 11, 10, 27, 31, 0, 29, 22, 41, 25, 26, 30, 44, 46, 45, 40, 23, 5, 47, 13, 2, 3, 14, 20, 49, 21, 42, 24, 43, 48],
        [13, 12, 15, 34, 11, 19, 42, 32, 30, 10, 14, 45, 33, 31, 36, 35, 16, 0, 37, 17, 39, 1, 18, 40, 38, 41, 3, 44, 20, 8, 24, 43, 2, 48, 21, 6, 22, 5, 23, 4, 46, 7, 47, 25, 49, 9, 26, 27, 28, 29],
        [2, 40, 20, 42, 21, 1, 4, 0, 3, 24, 23, 22, 41, 5, 44, 45, 46, 47, 25, 43, 6, 48, 26, 27, 28, 29, 49, 30, 7, 11, 8, 12, 10, 13, 9, 31, 14, 15, 16, 17, 18, 32, 33, 34, 19, 35, 36, 37, 38, 39],
        [10, 11, 31, 15, 13, 16, 35, 36, 12, 18, 14, 33, 17, 37, 38, 32, 34, 30, 1, 23, 20, 19, 41, 39, 0, 4, 25, 24, 43, 42, 21, 40, 2, 45, 46, 22, 44, 47, 3, 5, 48, 27, 26, 9, 28, 29, 6, 49, 7, 8],
        [6, 0, 5, 41, 2, 21, 7, 20, 42, 40, 14, 29, 4, 1, 9, 24, 3, 43, 23, 10, 26, 22, 27, 8, 45, 11, 12, 25, 13, 48, 33, 28, 44, 16, 19, 30, 46, 15, 18, 47, 31, 17, 32, 49, 36, 34, 35, 37, 38, 39],
        [13, 35, 31, 30, 10, 12, 32, 38, 40, 16, 11, 22, 37, 39, 18, 20, 21, 1, 23, 0, 2, 34, 14, 15, 33, 36, 25, 17, 19, 41, 43, 4, 24, 26, 29, 42, 5, 6, 8, 3, 7, 45, 27, 28, 44, 46, 9, 47, 48, 49],
        [19, 18, 39, 17, 14, 15, 36, 35, 12, 34, 16, 9, 10, 31, 32, 33, 11, 38, 13, 6, 5, 28, 27, 0, 29, 37, 49, 2, 24, 26, 4, 1, 42, 48, 25, 41, 46, 47, 3, 40, 22, 23, 43, 7, 44, 20, 30, 8, 45, 21],
        [30, 31, 12, 13, 14, 33, 35, 32, 18, 19, 34, 2, 10, 11, 37, 16, 0, 1, 36, 17, 15, 38, 40, 41, 39, 21, 4, 42, 43, 23, 3, 20, 6, 22, 44, 5, 49, 45, 24, 46, 9, 25, 47, 7, 48, 26, 8, 27, 28, 29],
        [1, 0, 22, 12, 29, 3, 46, 42, 23, 20, 40, 26, 6, 2, 7, 5, 4, 24, 41, 25, 28, 21, 10, 27, 32, 43, 11, 30, 31, 8, 9, 15, 44, 47, 17, 18, 48, 33, 45, 13, 14, 34, 16, 35, 49, 38, 36, 39, 37, 19],
        [48, 9, 29, 7, 8, 28, 49, 6, 4, 5, 3, 0, 1, 2, 43, 26, 47, 46, 25, 24, 27, 44, 41, 45, 21, 22, 20, 23, 36, 42, 40, 13, 18, 19, 15, 35, 39, 11, 38, 12, 14, 16, 17, 30, 37, 31, 32, 34, 10, 33],
        [24, 0, 25, 26, 2, 5, 3, 29, 44, 1, 41, 42, 4, 21, 22, 30, 27, 20, 31, 23, 43, 40, 46, 47, 13, 28, 45, 6, 32, 49, 48, 7, 8, 37, 33, 35, 9, 10, 38, 34, 36, 39, 11, 12, 17, 14, 15, 16, 18, 19],
        [10, 13, 33, 30, 34, 36, 11, 42, 3, 1, 0, 17, 14, 40, 31, 15, 16, 5, 12, 18, 19, 35, 23, 25, 37, 45, 27, 41, 38, 49, 2, 48, 7, 8, 9, 39, 24, 26, 28, 29, 4, 6, 21, 43, 32, 47, 44, 22, 20, 46],
        [1, 21, 43, 6, 9, 40, 22, 0, 48, 44, 4, 5, 20, 46, 26, 7, 3, 2, 41, 24, 23, 45, 49, 47, 27, 42, 8, 10, 25, 29, 30, 32, 14, 28, 31, 11, 33, 12, 15, 17, 39, 13, 34, 35, 16, 36, 37, 38, 19, 18],
        [10, 23, 29, 28, 27, 26, 25, 49, 24, 48, 47, 22, 21, 8, 7, 6, 5, 44, 45, 3, 42, 19, 4, 43, 15, 2, 1, 9, 16, 17, 18, 20, 46, 39, 0, 41, 32, 11, 35, 14, 30, 31, 33, 34, 36, 40, 38, 37, 13, 12],
        [4, 0, 26, 45, 42, 22, 20, 1, 5, 2, 41, 46, 44, 6, 40, 9, 21, 3, 10, 23, 19, 49, 7, 8, 11, 12, 47, 14, 48, 43, 25, 15, 24, 13, 16, 17, 33, 27, 28, 18, 30, 29, 31, 32, 35, 39, 34, 37, 36, 38],
        [10, 29, 49, 48, 28, 27, 47, 26, 24, 9, 25, 22, 23, 8, 20, 21, 19, 7, 6, 46, 5, 18, 45, 44, 3, 4, 2, 0, 16, 1, 17, 42, 14, 15, 34, 41, 43, 35, 36, 13, 11, 31, 32, 33, 37, 38, 39, 40, 12, 30]]

loc = pd.read_csv('newtest20.CSV')
i=0#列表20节点
n=30#起始节点
l=0#测试集含小列表数
speed=1.5#速度
add=0#增加的时间
j=0
duration=0

for l in range(30):
    for i in range(19):
        time_number = t2s(format(parse(loc.DepartureTime[tour[l][i + 1] + 20 * l]) - parse(loc.ArrivalTime[tour[l][0] + 20 * l])))# 车辆停留时间
        if duration > time_number:
            continue
        lat1=loc.lat_truth[tour[l][j]+20*l]
        lon1=loc.lon_truth[tour[l][j]+20*l]
        lat2=loc.lat_truth[tour[l][i+1]+20*l]
        lon2=loc.lon_truth[tour[l][i+1]+20*l]
        LLs2Dist(lat1, lon1, lat2, lon2)

        duration = 1000*LLs2Dist(lat1, lon1, lat2, lon2)/speed+add
        if duration<time_number:
            n=n+1
        add=duration
        j=i+1
    j=0
rate=n/(20*30)
print(rate)
